#include <hf-risc.h>
#include "vga_drv.h"

#define VERT_BAR_BASE	9
#define NUMBER_OF_BARS  13 * VERT_BAR_BASE


struct ball_s {
	unsigned int ballx, bally;
	unsigned int last_ballx, last_bally;
	int dx, dy;
	int spx, spy;
	int spxcnt, spycnt;
};

struct paddle {
	unsigned int x, y;
	unsigned int cor;
	int spx;
	int lastdir;
	unsigned int div;
	unsigned int w, h;
	unsigned int moment;
};

struct bars {
	unsigned int x, y;
	int w, h;
	int cor;
};


void init_bars(struct bars *b[NUMBER_OF_BARS])
{
 	for (int i = 0, l = 0; i < 280; i += 21) {
 		display_frectangle(5+i, 5, 20, 8, RED);
		b[l]->x = 5+i;
		b[l]->y = 5;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = RED;
 		display_frectangle(5+i, 14, 20, 8, LRED);
		b[l]->x = 5+i;
		b[l]->y = 14;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = LRED;
 		display_frectangle(5+i, 23, 20, 8, YELLOW);
		b[l]->x = 5+i;
		b[l]->y = 23;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = YELLOW;
 		display_frectangle(5+i, 32, 20, 8, GREEN);
		b[l]->x = 5+i;
		b[l]->y = 32;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = GREEN;
 		display_frectangle(5+i, 41, 20, 8, LGREEN);
		b[l]->x = 5+i;
		b[l]->y = 41;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = LGREEN;
 		display_frectangle(5+i, 50, 20, 8, CYAN);
		b[l]->x = 5+i;
		b[l]->y = 50;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = CYAN;
 		display_frectangle(5+i, 59, 20, 8, LCYAN);
		b[l]->x = 5+i;
		b[l]->y = 59;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = LCYAN;
 		display_frectangle(5+i, 68, 20, 8, BLUE);
		b[l]->x = 5+i;
		b[l]->y = 68;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = BLUE;
 		display_frectangle(5+i, 77, 20, 8, LBLUE);
		b[l]->x = 5+i;
		b[l]->y = 77;
		b[l]->w = 20;
		b[l]->h = 8;
		b[l++]->cor = LBLUE;
 	}
 }

void init_paddle(struct paddle *p) {
	p->x = 130;
	p->y = 170;
	p->cor = WHITE;
	p->spx = 1;
	p->div = 5;
	p->moment = 0;
	p->lastdir = 0;
	p->w = 20;
	p->h = 4;
	display_frectangle(p->x, p->y, p->w, p->h, p->cor); //paddle
}

void init_display(struct bars *b[NUMBER_OF_BARS])
{
	display_background(BLACK);
	init_bars(b);
	for (int i = 0; i < NUMBER_OF_BARS; i++) {
		printf("Barra %d, (%d, %d), w: %d, h: %d, cor: %d\n", i, b[i]->x, b[i]->y, b[i]->w, b[i]->h, b[i]->cor);
	}
}

void init_ball(struct ball_s *ball, int x, int y, int dx, int dy, int spx, int spy)
{
	ball->ballx = x;
	ball->bally = y;
	ball->last_ballx = ball->ballx;
	ball->last_bally = ball->bally;
	ball->dx = dx;
	ball->dy = dy;
	ball->spx = spx;
	ball->spxcnt = spx;
	ball->spy = spy;
	ball->spycnt = spy;
}

void init_input()
{
	/* configure GPIOB pins 8 .. 12 as inputs */
	GPIOB->DDR &= ~(MASK_P8 | MASK_P9 | MASK_P10 | MASK_P11 | MASK_P12);
}

void test_limits(struct ball_s *ball, char *limits)
{
	unsigned int ballx, bally;
	
	ballx = ball->ballx;
	bally = ball->bally;
	
	limits[0] = display_getpixel(ballx-1, bally-1);		//D_left
	limits[1] = display_getpixel(ballx, bally-1);		//Down
	limits[2] = display_getpixel(ballx+1, bally-1);		//D_right
	limits[3] = display_getpixel(ballx-1, bally);		//Left
	limits[4] = 0;
	limits[5] = display_getpixel(ballx+1, bally);		//Right
	limits[6] = display_getpixel(ballx-1, bally+1);		//U_left
	limits[7] = display_getpixel(ballx, bally+1);		//Up
	limits[8] = display_getpixel(ballx+1, bally+1);		//U_right
}

char test_collision(struct ball_s *ball, char *dir, struct bars *b[NUMBER_OF_BARS], struct paddle *p)
{
	char hit = 0;
	char cor_hit;
	int i, j, pos_hit;
	char limits[9];
	
	if ((ball->spx == ball->spxcnt) || (ball->spy == ball->spycnt)) {
		test_limits(ball, limits);

		if ((ball->ballx < VGA_WIDTH-1) && (ball->ballx > 0) && (ball->bally < VGA_HEIGHT-1) && (ball->bally > 0)) {
			for (i = 0; i < 9; i++) {
				if (limits[i]) {
					printf("Hit! Cor: %d\n", limits[i]);
					hit = 1;
					cor_hit = limits[i];
					break;
				}
			}
			if (cor_hit == WHITE) {
				unsigned int a = p->x;
				unsigned int b = p->x + p->w;
				unsigned int m = (a + b) / 2;
				if (a-3 < m && a+3 > m) {
					ball->spy = (ball->spy < 5 ? ball->spy : ball->spy - 3);
					ball->spx = (ball->spx > 15 ? ball->spx : ball->spx + 1);
				} else {
					ball->spx = (ball->spx < 5 ? ball->spx : ball->spx - 3);
					ball->spy = (ball->spy > 15 ? ball->spy : ball->spy + 1);
				}
			}
			switch (cor_hit) {
				case RED: i = 0; break;
				case LRED: i = 1; break;
				case YELLOW: i = 2; break;
				case GREEN: i = 3; break;
				case LGREEN: i = 4; break;
				case CYAN: i = 5; break;
				case LCYAN: i = 6; break;
				case BLUE: i = 7; break;
				case LBLUE: i = 8; break;
				default: i = -1; break;
			}

			if (i != -1) {
				for (j = 0; j < 13; i += VERT_BAR_BASE, j++) {
					if (ball->ballx <= (b[i]->x + b[i]->w + 1) && ball->ballx >= b[i]->x - 1) {
						//printf("Deletando bloco em (%d, %d)\n", b[i]->x, b[i]->y);
						display_frectangle(b[i]->x, b[i]->y, b[i]->w, b[i]->h, BLACK);
						break;
					}
				}
			}

			if (limits[1]) /*DOWN*/	{ 
				ball->dy = -ball->dy;
			}

			if (limits[3]) /*LEFT*/ { 
				ball->dx = -ball->dx;
			}
			if (limits[5])/*RIGHT*/{ 
				ball->dx = -ball->dx;
			}			
			if (limits[7]) /*UP*/{ 
				ball->dy = -ball->dy;
			}

			if (limits[0]) {								//D_left
				if (!limits[3]) ball->dx = -ball->dx;
				if (!limits[1]) ball->dy = -ball->dy;
			}
			if (limits[2]) {								//D_right
				if (!limits[5]) ball->dx = -ball->dx;
				if (!limits[1]) ball->dy = -ball->dy;
			}
			if (limits[6]) {								//U_left
				if (!limits[3]) ball->dx = -ball->dx;
				if (!limits[7]) ball->dy = -ball->dy;
			}
			if (limits[8]) {								//U_right
				if (!limits[5]) ball->dx = -ball->dx;
				if (!limits[7]) ball->dy = -ball->dy;
			}
		} else {
			if ((ball->ballx + ball->dx > VGA_WIDTH-1) || (ball->ballx + ball->dx < 1))
				ball->dx = -ball->dx;
			if ((ball->bally + ball->dy > VGA_HEIGHT-1) || (ball->bally + ball->dy < 1))
				ball->dy = -ball->dy;
		}
	}
	
	return hit;
}

void update_ball(struct ball_s *ball, char hit)
{
	ball->last_ballx = ball->ballx;
	ball->last_bally = ball->bally;
	
	if (hit) {
		ball->spxcnt = 1;
		ball->spycnt = 1;
	}
	
	if (--ball->spxcnt == 0) {
		ball->spxcnt = ball->spx;
		ball->ballx = ball->ballx + ball->dx;
	}
	if (--ball->spycnt == 0) {
		ball->spycnt = ball->spy;
		ball->bally = ball->bally + ball->dy;
	}

	if ((ball->spx == ball->spxcnt) || (ball->spy == ball->spycnt)) {
		display_pixel(ball->last_ballx, ball->last_bally, BLACK);
		display_pixel(ball->ballx, ball->bally, WHITE);
	}
}

void get_input(struct paddle *p)
{
	char divMEU = 3;
	if (GPIOB->IN & MASK_P10 && p->x > 5) { // left
		int temp = p->x;
		p->lastdir = 1;
		if (p->div > 0) p->div--;
		else {
			p->x = (p->x - p->moment < 0 ? 0 : p->x - p->moment);
			p->moment = (p->moment < 3 ? p->moment + 1 : 3);
			display_frectangle(temp, p->y, (p->w), p->h, BLACK);
			display_frectangle(p->x, p->y, (p->w), p->h, p->cor);
			p->div = divMEU;
		}
	} else if (p->moment > 3 && p->lastdir == -1 && p->x > 5) {
		int temp = p->x;
		if (p->div > 0) p->div--;
		else {
			p->x = (p->x - p->moment > 0 ? 0 : p->x - p->moment);
			p->moment--;
			display_frectangle(temp, p->y, (p->w), p->h, BLACK);
			display_frectangle(p->x, p->y, (p->w), p->h, p->cor);
			p->div = divMEU;
		}
	}
	if (GPIOB->IN & MASK_P11 && p->x < 280) { // right
		p->lastdir = -1;
		int temp = p->x;
		if (p->div > 0) p->div--;
		else {
			p->x = (p->x + p->moment > 280 ? 280 : p->x + p->moment);
			p->moment = (p->moment < 3 ? p->moment + 1 : 3);
			display_frectangle(temp, p->y, (p->w), p->h, BLACK);
			display_frectangle(p->x, p->y, (p->w), p->h, p->cor);
			p->div = divMEU;
		}
	} else if (p->moment > 5 && p->lastdir == -1) {
		int temp = p->x;
		if (p->div > 0) p->div--;
		else {
			p->x = (p->x + p->moment > 280 ? 280 : p->x + p->moment);
			p->moment--;
			display_frectangle(temp, p->y, (p->w), p->h, BLACK);
			display_frectangle(p->x, p->y, (p->w), p->h, p->cor);
			p->div = divMEU;
		}
	}
	if (p->moment == 0) p->lastdir = 0;
}



int main(void)
{
	struct ball_s	ball1, ball2, ball3;
	struct paddle	pad;
	struct ball_s	*pball1 = &ball1;
	struct ball_s	*pball2 = &ball2;
	struct ball_s	*pball3 = &ball3;
	struct paddle	*pad_pointer = &pad;
	struct bars		*b[NUMBER_OF_BARS];
	char hit;
	char dir;
	
	heap_init((uint32_t *)&_heap_start, 8192);

	for (int i = 0; i < NUMBER_OF_BARS; i++) b[i] = malloc(sizeof(struct bars));

	init_display(b);
	init_paddle(pad_pointer);
	init_ball(pball1, 20, 200, 1, -1, 1, 1);
	init_input();

	while (1) {
		hit = test_collision(pball1, &dir, b, pad_pointer);
		update_ball(pball1, hit);
		get_input(pad_pointer);
		delay_ms(5);
	}
	return 0;
}
